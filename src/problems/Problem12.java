package problems;


//The sequence of triangle numbers is generated by adding the natural numbers.
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//        Let us list the factors of the first seven triangle numbers:
//
//        1: 1
//        3: 1,3
//        6: 1,2,3,6
//        10: 1,2,5,10
//        15: 1,3,5,15
//        21: 1,3,7,21
//        28: 1,2,4,7,14,28
//        We can see that 28 is the first triangle number to have over five divisors.
//
//        What is the value of the first triangle number to have over five hundred divisors?


import java.util.ArrayList;

public class Problem12 {


    public Problem12() {
        solve();
    }

    private void solve() {
        int factorAmount = 501;

        boolean searchingTriangleNumber = true;
        int triangleNumber = 0;

        for (int i = 1; searchingTriangleNumber; i++) {
            triangleNumber += i;
            int currentFactorAmount = calculateAmountOfFactors(triangleNumber);

            if (currentFactorAmount >= factorAmount) {
                System.out.println("Problem 12 solution: " + triangleNumber);
                searchingTriangleNumber = false;
            }
        }
    }


    private boolean isDuplicate(int number, ArrayList<Integer> list) {
        for (Integer factor : list) {
            if (factor == number) {
                return true;
            }
        }
        return false;
    }

    private int calculateAmountOfFactors(int triangleNumber) {
        int currentFactorAmount = 0;
        ArrayList<Integer> factorList = new ArrayList<>();
        for (int n = 1; n <= Math.sqrt(triangleNumber); n++) {
            if (triangleNumber % n == 0) {

                if (!isDuplicate(n, factorList)) {
                    factorList.add(n);
                    currentFactorAmount++;
                }
                if (!isDuplicate(triangleNumber / n, factorList)) {
                    factorList.add(triangleNumber / n);
                    currentFactorAmount++;
                }
            }
        }
        return currentFactorAmount;
    }
}
